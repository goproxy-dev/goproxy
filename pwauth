#!/usr/bin/env python

import sys
import os
import ctypes
import ctypes.util
import commands

PAM_PROMPT_ECHO_OFF       = 1
PAM_PROMPT_ECHO_ON        = 2
PAM_ERROR_MSG             = 3
PAM_TEXT_INFO             = 4
PAM_REINITIALIZE_CRED     = 8

class PamHandle(ctypes.Structure):
    """wrapper class for pam_handle_t pointer"""
    _fields_ = [ ("handle", ctypes.c_void_p) ]

    def __init__(self):
        ctypes.Structure.__init__(self)
        self.handle = 0

class PamMessage(ctypes.Structure):
    """wrapper class for pam_message structure"""
    _fields_ = [ ("msg_style", ctypes.c_int), ("msg", ctypes.c_char_p) ]

    def __repr__(self):
        return "<PamMessage %i '%s'>" % (self.msg_style, self.msg)

class PamResponse(ctypes.Structure):
    """wrapper class for pam_response structure"""
    _fields_ = [ ("resp", ctypes.c_char_p), ("resp_retcode", ctypes.c_int) ]

    def __repr__(self):
        return "<PamResponse %i '%s'>" % (self.resp_retcode, self.resp)

conv_func = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.POINTER(ctypes.POINTER(PamMessage)), ctypes.POINTER(ctypes.POINTER(PamResponse)), ctypes.c_void_p)

class PamConv(ctypes.Structure):
    """wrapper class for pam_conv structure"""
    _fields_ = [ ("conv", conv_func), ("appdata_ptr", ctypes.c_void_p) ]


def pwauth_pam_authenticate(username, password, service='login'):
    """Returns True if the given username and password authenticate for the
    given service.  Returns False otherwise

    ``username``: the username to authenticate

    ``password``: the password in plain text

    ``service``: the PAM service to authenticate against.
                 Defaults to 'login'"""
    libc                      = ctypes.CDLL(ctypes.util.find_library("c"))
    libpam                    = ctypes.CDLL(ctypes.util.find_library("pam"))

    calloc                    = libc.calloc
    calloc.restype            = ctypes.c_void_p
    calloc.argtypes           = [ctypes.c_size_t, ctypes.c_size_t]

    pam_end                   = libpam.pam_end
    pam_end.restype           = ctypes.c_int
    pam_end.argtypes          = [PamHandle, ctypes.c_int]

    pam_start                 = libpam.pam_start
    pam_start.restype         = ctypes.c_int
    pam_start.argtypes        = [ctypes.c_char_p, ctypes.c_char_p, ctypes.POINTER(PamConv), ctypes.POINTER(PamHandle)]

    pam_setcred               = libpam.pam_setcred
    pam_setcred.restype       = ctypes.c_int
    pam_setcred.argtypes      = [PamHandle, ctypes.c_int]

    pam_strerror              = libpam.pam_strerror
    pam_strerror.restype      = ctypes.c_char_p
    pam_strerror.argtypes     = [PamHandle, ctypes.c_int]

    pam_authenticate          = libpam.pam_authenticate
    pam_authenticate.restype  = ctypes.c_int
    pam_authenticate.argtypes = [PamHandle, ctypes.c_int]

    @conv_func
    def my_conv(n_messages, messages, p_response, app_data):
        """Simple conversation function that responds to any
        prompt where the echo is off with the supplied password"""
        # Create an array of n_messages response objects
        addr = calloc(n_messages, ctypes.sizeof(PamResponse))
        p_response[0] = ctypes.cast(addr, ctypes.POINTER(PamResponse))
        for i in range(n_messages):
            if messages[i].contents.msg_style == PAM_PROMPT_ECHO_OFF:
                pw_copy = calloc(len(password)+1, ctypes.sizeof(ctypes.c_char))
                ctypes.memmove(pw_copy, cpassword, len(password))
                p_response.contents[i].resp = pw_copy
                p_response.contents[i].resp_retcode = 0
        return 0
    cpassword = ctypes.c_char_p(password)
    handle = PamHandle()
    conv = PamConv(my_conv, 0)
    retval = pam_start(service, username, ctypes.pointer(conv), ctypes.pointer(handle))
    if retval != 0:
        pam_end(handle, retval)
        return retval, 'pam_start() failed'
    retval = pam_authenticate(handle, 0)
    if retval == 0:
        pam_setcred(handle, PAM_REINITIALIZE_CRED);
    reason = pam_strerror(handle, retval)
    pam_end(handle, retval)
    return retval, reason


def pwauth_htpasswd_authenticate(username, password, passwordfile='htpasswd.txt'):
    libaprutil = ctypes.CDLL(ctypes.util.find_library("aprutil-1"))
    passwordfile = next((x for x in (passwordfile, '.htpasswd', 'htpasswd', 'passwordfile') if os.path.isfile(x)), passwordfile)
    hashstr = next((b for a, b in (x.strip().split(':', 1) for x in open(passwordfile)) if a == username), '')
    if not hashstr:
        return 0x1, 'username %r not exists in %r' % (username, passwordfile)
    retval = libaprutil.apr_password_validate(password, hashstr)
    reason = 'Success' if retval == 0 else 'Errno=%r' % retval
    return retval, reason

def authenticate(mode, username, password):
    if mode == 'pam':
        return pwauth_pam_authenticate(username, password)
    elif mode == 'htpasswd':
        return pwauth_htpasswd_authenticate(username, password)
    else:
        return 127, 'Unknown auth method: %r'% mode


if __name__ == "__main__":
    mode = sys.argv[1] if len(sys.argv) > 1 else 'pam'
    username, password = sys.stdin.read().splitlines()
    code, reason = authenticate(mode, username, password)
    sys.stderr.write(reason)
    sys.exit(code)

